import java.text.SimpleDateFormat
import org.apache.tools.ant.filters.FixCrLfFilter
import org.gradle.api.tasks.testing.logging.TestExceptionFormat

plugins {
  id 'java-library'
  id 'com.jfrog.bintray' version '1.8.4'
  id 'maven-publish'
}

apply plugin: 'maven-publish'

def pathToNativeInJar = 'resources/com/pty4j/native'
def projectVersion = new File(rootProject.projectDir, 'VERSION').text

version = projectVersion

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
  }
  test {
    java {
      srcDirs = ['test']
    }
    resources {
      srcDir 'test/resources'
    }
  }
}

test {
  testLogging {
    events("passed", "skipped", "failed")
    showStackTraces = true
    exceptionFormat = TestExceptionFormat.FULL
    showStandardStreams = true
  }
}

compileJava {
  sourceCompatibility = '1.8'
  targetCompatibility = '1.8'
  options.debugOptions.debugLevel = 'lines,vars,source'
}

repositories {
  jcenter()
}

jar {
  from('os') {
    include '**/*'
    into pathToNativeInJar
  }
  manifest {
    attributes(
        'Build-Timestamp': new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
        'Created-By': "Gradle ${gradle.gradleVersion}",
        'Build-Jdk': "${System.properties['java.runtime.version']}",
        'Build-OS': "${System.properties['os.name']} ${System.properties['os.arch']} ${System.properties['os.version']}"
    )
  }
}

task sourcesZip(type: Jar, dependsOn: classes) {
  classifier 'sources'
  baseName 'pty4j'
  from sourceSets.main.allSource
  filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
}

artifacts {
  archives sourcesZip
}

task testJar(type: Test, dependsOn: [jar, testClasses]) {
  description = 'Runs tests on built jar instead of build/classes/java/main/**/*.class files'
  group = 'verification'

  testClassesDirs = sourceSets.test.output.classesDirs
  classpath = project.files("$buildDir/libs/" + jar.archiveFileName.get(),
                            sourceSets.test.output.classesDirs,
                            sourceSets.test.output.resourcesDir,
                            configurations.testRuntimeClasspath)
  systemProperty 'pty4j.preferred.native.folder', 'false'
  shouldRunAfter test
}

check.dependsOn test, testJar

dependencies {
  implementation files('libs/purejavacomm.jar')
  implementation 'org.jetbrains:annotations:16.0.2'
  implementation 'com.google.guava:guava:25.1-jre'
  implementation "log4j:log4j:1.2.14"
  implementation 'net.java.dev.jna:jna:5.6.0'
  implementation 'net.java.dev.jna:jna-platform:5.6.0'
  testImplementation 'junit:junit:4.12'
}

publishing {
  publications {
    MyPublication(MavenPublication) {
      from components.java
      groupId 'org.jetbrains.pty4j'
      artifactId 'pty4j'
      version System.getenv('BINTRAY_USER') != null ? projectVersion : projectVersion + '-SNAPSHOT'
      artifact sourcesZip
      pom {
        name = 'pty4j'
        description = 'Pseudo terminal(PTY) implementation in Java'
        url = 'https://github.com/traff/pty4j'
        licenses {
          license {
            name = 'Eclipse Public License 1.0'
            url = 'https://opensource.org/licenses/eclipse-1.0.php'
          }
        }
        developers {
          developer {
            id = 'JetBrains'
            name = 'JetBrains Team'
            organization = 'JetBrains'
            organizationUrl = 'https://www.jetbrains.com'
            email = 'dmitry.trofimov@jetbrains.com'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:JetBrains/pty4j.git'
          developerConnection = 'scm:git:ssh:github.com/JetBrains/pty4j.git'
          url = 'https://github.com/JetBrains/pty4j'
        }
      }
    }
  }
}

bintray {
  user = System.getenv('BINTRAY_USER')
  key = System.getenv('BINTRAY_KEY')

  publish = true

  pkg {
    repo = 'pty4j'
    name = 'org.jetbrains.pty4j:pty4j'
    userOrg = 'jetbrains'
    licenses = ['EPL-1.0']
    vcsUrl = 'https://github.com/JetBrains/pty4j.git'

    version {
      name = projectVersion
    }
  }
  publications = ['MyPublication']
}
